// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using erp_server.Data;

#nullable disable

namespace erp_server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250507072159_EditAndDebug")]
    partial class EditAndDebug
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("erp_server.Models.BusinessSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EnableDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("啟用外送");

                    b.Property<bool>("EnableDineIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("啟用內用");

                    b.Property<bool>("EnableOrdering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("點餐系統啟用");

                    b.Property<bool>("EnableTakeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasComment("啟用外帶");

                    b.HasKey("Id");

                    b.ToTable("BusinessSettings");
                });

            modelBuilder.Entity("erp_server.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int?>("StockAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("erp_server.Models.MaterialTag", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("MaterialId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MaterialTags");
                });

            modelBuilder.Entity("erp_server.Models.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("Depend")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OptionChildrenId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<bool>("Require")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Depend");

                    b.HasIndex("OptionChildrenId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("erp_server.Models.OptionChildren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OptionChildren");
                });

            modelBuilder.Entity("erp_server.Models.OptionRadio", b =>
                {
                    b.Property<Guid>("OptionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChildrenId")
                        .HasColumnType("char(36)");

                    b.HasKey("OptionId", "ChildrenId");

                    b.HasIndex("ChildrenId");

                    b.ToTable("OptionRadios");
                });

            modelBuilder.Entity("erp_server.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("erp_server.Models.ProductExcludedOption", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductExcludedOptions");
                });

            modelBuilder.Entity("erp_server.Models.ProductMaterial", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("erp_server.Models.ProductOption", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductOptions");
                });

            modelBuilder.Entity("erp_server.Models.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("erp_server.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("erp_server.Models.TypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("erp_server.Models.TypeMaterials", b =>
                {
                    b.Property<Guid>("TypeEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("char(36)");

                    b.HasKey("TypeEntityId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("TypeMaterials");
                });

            modelBuilder.Entity("erp_server.Models.TypeOption", b =>
                {
                    b.Property<Guid>("TypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("char(36)");

                    b.HasKey("TypeId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("TypeOptions");
                });

            modelBuilder.Entity("erp_server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("erp_server.Models.MaterialTag", b =>
                {
                    b.HasOne("erp_server.Models.Material", "Material")
                        .WithMany("MaterialTags")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.Tag", "Tag")
                        .WithMany("MaterialTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("erp_server.Models.Option", b =>
                {
                    b.HasOne("erp_server.Models.Material", "Material")
                        .WithMany("Options")
                        .HasForeignKey("Depend")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("erp_server.Models.OptionChildren", null)
                        .WithMany("Options")
                        .HasForeignKey("OptionChildrenId");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("erp_server.Models.OptionRadio", b =>
                {
                    b.HasOne("erp_server.Models.OptionChildren", "OptionChildren")
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("OptionChildren");
                });

            modelBuilder.Entity("erp_server.Models.Product", b =>
                {
                    b.HasOne("erp_server.Models.TypeEntity", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("erp_server.Models.ProductExcludedOption", b =>
                {
                    b.HasOne("erp_server.Models.Option", "Option")
                        .WithMany("ExcludedOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.Product", "Product")
                        .WithMany("ExcludedOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erp_server.Models.ProductMaterial", b =>
                {
                    b.HasOne("erp_server.Models.Material", "Material")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erp_server.Models.ProductOption", b =>
                {
                    b.HasOne("erp_server.Models.Option", "Option")
                        .WithMany("ProductOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.Product", "Product")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("erp_server.Models.ProductTag", b =>
                {
                    b.HasOne("erp_server.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("erp_server.Models.TypeMaterials", b =>
                {
                    b.HasOne("erp_server.Models.Material", "Material")
                        .WithMany("TypeMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.TypeEntity", "TypeEntity")
                        .WithMany("TypeMaterials")
                        .HasForeignKey("TypeEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("TypeEntity");
                });

            modelBuilder.Entity("erp_server.Models.TypeOption", b =>
                {
                    b.HasOne("erp_server.Models.Option", "Option")
                        .WithMany("TypeOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("erp_server.Models.TypeEntity", "Type")
                        .WithMany("TypeOptions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("erp_server.Models.Material", b =>
                {
                    b.Navigation("MaterialTags");

                    b.Navigation("Options");

                    b.Navigation("ProductMaterials");

                    b.Navigation("TypeMaterials");
                });

            modelBuilder.Entity("erp_server.Models.Option", b =>
                {
                    b.Navigation("ExcludedOptions");

                    b.Navigation("ProductOptions");

                    b.Navigation("TypeOptions");
                });

            modelBuilder.Entity("erp_server.Models.OptionChildren", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("erp_server.Models.Product", b =>
                {
                    b.Navigation("ExcludedOptions");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductOptions");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("erp_server.Models.Tag", b =>
                {
                    b.Navigation("MaterialTags");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("erp_server.Models.TypeEntity", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TypeMaterials");

                    b.Navigation("TypeOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
